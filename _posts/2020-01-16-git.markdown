---
layout: post
title:  "git & github 기초"
date:   2020-01-16 11:00:00 +0900
author: 지민규
categories: Rookie7
---
## 버전 관리 시스템

* Version Control System; VCS
* 파일의 변화를 시간에 따라 기록하여 과거 특정 시점의 버전으로 다시 불러올 수 있는 시스템
* 개별 파일 혹은 프로젝트 전체를 이전 상태로 되돌리기
* 시간에 따른 변경 사항을 검토
* 문제가 되는 부분을 누가 마지막으로 수정하였는지 찾기
* 파일을 잃어버리거나 무언가 잘못되어도 대개 쉽게 복구 가능

## Git

* 대표적인 분산 버전 관리 시스템
* Git의 데이터는 파일의 스냅샷
* 파일이 달라지지 않으면 이전 버전의 링크만 저장
* 거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 빠름

## Git의 무결성

* 모든 데이터를 저장하기 전 체크섬(해시)을 구하고 그 체크섬으로 데이터를 관리
* SHA-1 해시 사용
* 40자 길이의 16진수 문자열
* 파일을 이름으로 저장하지 않고 해당 파일의 해시로 저장

## 세 가지 상태

* Committed
    * 데이터가 로컬 데이터베이스에 안전하게 저장됨
* Modified
    * 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않음
* Staged
    * 수정한 파일을 곧 커밋할 것이라고 표시
* Git으로 하는 기본적인 일
    * 워킹 디렉토리에서 파일을 수정
    * Staging Area에 파일을 Stage해서 커밋할 스냅샷을 만듦
    * Staging Area에 있는 파일들을 커밋해서 Git 디렉토리에 영구적인 스냅샷으로 저장

## 파일 수정과 상태 변경

* 워킹 디렉토리의 파일은 Tracked와 Untracked로 나뉨
* Tracked
    * 이미 스냅샷에 포함
    * Unmodified
    * Modified
    * Staged
* Untracked
* 파일 수정 -> Stage 하기 -> Commit 하기 -> Push 하기
* .gitignore 파일을 작성하여 관리하지 않을 파일들을 지정할 수 있음

## Git이 데이터를 저장하는 방법

* commit을 하면 Git은 commit 개체를 생성
    * 데이터의 스냅샷에 대한 포인터
    * 메타데이터 : 저자, 커밋 메시지 등
    * 이전 커밋에 대한 포인터
* 다시 파일을 수정하고 커밋하면 이전 커밋이 무엇인지도 저장
* Git의 브랜치는 커밋을 가리키는 포인터

## 머지

* 한 브랜치의 내용을 다른 브랜치에 합치는 것

## Fast-forward

1. 브랜치 A에서 브랜치 B를 생성한다
2. 브랜치 B에서 파일 일부를 수정하고 커밋한다.
3. 브랜치 A와 브랜치 B를 머지한다.
    * 위 경우 머지를 하면 새로운 커밋을 생성하지 않고 머지가 됨.
    * 위와 같이 커밋을 생성하지 않고 브랜치 포인터만 옮기ㅡㄴ 것을 fast-forward라고 하낟.

## Git-flow

* 브랜치 관리 모델 중 하나로 Vincent Driessen이 주장
* 메인 브랜치
    * master
        * master 브랜치는 배포된 소스가 있음
    * develop
        * 다음 배포를 위한 소스
        * 개발이 완료되면 일련의 과정을 통해 master로 머지됨
* 서포팅 브랜치
    * master와 develop 외에 팀 멤버들이 병렬로 일할 수 있도록 도와주는 브랜치
    * 메인 브랜치와는 다르게 생성하였다가 삭제
    * feature 브랜치
        * 브랜치 생성: develop로부터
        * 머지 : develop로
        * prefix: feature/
        * feature 브랜치는 특정 기능 하나에 대하여 develop로부터 생성하여 개발하며 개발이 완료되면 다시 develop로 머지
        * 이 때 각 기능별로 개발한 커밋을 구별할 수 있도록 fast-forward는 사용하지 않음
    * release 브랜치
        * 브랜치 생성 : develop로부터
        * 머지 : develop와 master로
        * prefix : release/
        * release 브랜치는 배포를 위한 준비를 할 수 있는 브랜치
        * release 브랜치는 develop 브랜치에 다음 배포를 위한 기능으 개발이 모두 완료되어 머지된 후 develop로부터 생성
        * release 브랜치에서는 각종 메타 데이터 (버전 명 등)을 변경하거나 작은 버그를 수정
        * 배포 준비가 완료되면 release 브랜치를 master와 develop에 각각 머지
        * master에는 버전 태그를 붙임
        * release 브랜치를 따로 가져가기 때문에 develop 브랜치에서는 바로 다음 배포를 위한 기능 기능을 시작할 수 있음
        * 그리고 release 브랜치를 다시 develop으로 머지하기 때문에 release 브랜치의 변경 사항이 develop에 반영됨
        * release 브랜치는 역할에 대한 의문이 있어서(역할이 애매함) 없이 개발을 진행하는 경우도 있음
    * hotfix 브랜치
        * 브랜치 생성 : master로부터
        * 머지 : develop와 master로
        * prefix : hotfix/
        * hotfix 브랜치는 배포된 버전에 긴급한 변경 사항이 있을 때 활용합니다.
        * 긴급한 이슈가 해결되면 다시 master롸 develop에 머지

## 원격 저장소

* git은 로컬 저장소만 사용할 수도 있지만 원격 저장소를 추가하여 사용할 수 있음
* Github의 저장소를 복제하면 git은 자동으로 Github에 있는 원격 저장소를 origin이라는 이름으로 추가함

## 로컬 브랜치와 원격 브랜치

* 로컬 브랜치인 master와 원격 브랜치인 origin/master는 서로 별개의 브랜치
* git이 origin/master를 체크아웃하여 로컬 브랜치인 master를 생성
* A라는 사람의 master와 B라는 사람의 master 역시 서로 다른 브랜치

# Fetch/Pull/Push

* Fetch
    * 원격 저장소의 변경 사항을 내려 받는 것을 fetch라고 함
    * fetch까지만 하면 변경 사항을 받았을 뿐 아직 로컬 브랜치에는 머지(반영)되지 않은 상태
    * 로컬 브랜치에 원격 저장소의 변경 사항을 반영하고 싶다면 수동으로 원격 브랜치를 로컬 브랜치로 머지해야함
* Pull
    * Fetch + 머지
    * 원격 브랜치의 변경 사항을 내려받은 후, 로컬 브랜치로 머지
* Push
    * 로컬 저장소의 변경 사항을 원격 저장소로 올리는 것

## 참고
* NHN 기술교육 -Git 이론과 Github 실습