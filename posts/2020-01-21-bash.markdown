---
layout: post
title:  "bash tutorial"
date:   2020-01-20 10:00:00 +0900
author: 지민규
categories: Rookie7
---

## 소개

* Unix Shell
    * Kernel을 둘러싸고 있는 껍데기
    * 사용자가 제어할 수 있는 명령행 해석기
    * MS 윈도우즈로 치면 DOS 창, 커맨드 창
* Bourne Shell
    * 1977, Stephen Bourne
* BASH (Bourne Again Shell)
    * 1989, Brian Fox
    * /bin/bash

# 커서 이동

* 문장의 맨 처음 / 끝
    * ctrl + a / ctrl + e
* 단어단위 이동
    * ctrl + 방향키
    * 안될 가능성이 높음, 어떤 터미널에서는 alt+방향키
* 화면 정리
    * ctrl + l
    * 화면을 모두 지우고 제일 위로
* 스크롤 중단 및 재개
    * ctrl + s / ctrl + q

## 서버 접속 및 종료

* 접속
    * ssh 서버
    * rlogin -l 아이디 호스트명
        * 암호화되어 있지 않아 안전하진 않음.
* 종료
    * logout / exit
* 조회
    * last

# 기본 명령

* pwd
    * 현재 디렉토리를 확인하는 명령
* id
    * 자신의 로그인 아이디 확인
* uname
    * 사용중인 unix 서버의 이름/OS 정보를 확인
    * 옵션
        * -a : 호스트명, 커널버전, 아키텍쳐 이름 등
    * 비슷한 명령
        * hostname : 접속된 호스트 이름
* echo
    * 문자열을 출력하는 명령
    * echo "hello world"
    * echo -n "hello world"; echo "java coffe"
        * -n : newline을 빼고 출력
        * 세미콜론(;)으로 문장 두개를 구분함
* ls
    * 디렉토리와 파일 목록을 출력하는 명령
    * 윈도우즈 cmd의 dir
    * -1 : 줄바꿈
    * -alF
        * a : 숨겨진 파일
        * l : 권한 등
        * F : 파일 형태(디렉토리, 파일 등)
    * /, /home1/user : 디렉토리 지정.
    * -t : 파일이 생성된 시간의 역순으로 출력
* tab 입력
    * ctrl+v+tab or ctrl+v+v+tab

## Globbing & Wildcard

* Glob Pattern
    * 임의의 길이를 가지는 문자열
        * \*
    * 임의의 한 글자
        * ?
    * 글자 집합에서의 한 글자
        * [abcw-z]
    * ls \* : 현재 디렉토리의 어떤 파일이든 모두 매칭
    * ls .\* : 점으로 시작하는 것 (hidden dir 또는 file)
    * ls [a-f]\*.txt : a-f 로 시작하는 파일
    * ls \*.tx? : 확장자가 tx뒤에 한 글자가 더 오는 파일들

## 파일 시스템

* File
    * OS에서 데이터를 디스크와 같은 저장소에 저장해 둘 때의 단위 형태
    * 넓은 의미에서는 일반 파일, 디렉토리와 각종 입출력 장치를 모두 파일로 간주
* Directory
    * 파일을 담아두는 공간(폴더)
    * 디렉토리 안에 디렉토리를 담을 수 있기 떄문에 트리 구조로 형상화
* 디렉토리 이동
    * 절대 경로와 상대 경로 모두 가능
``` bash
    cd /var/log
```
* 사용자 홈 디렉토리
    * cd \~/.vim
        * \~ 가 사용자의 홈 디렉토리를 나타냄 (tilde)
* 특정 사용자의 홈 디렉토리
    * cd \~nemon : cd \~사용자

## History

* 조회
    * history
* 12번 명령 재실행
    * !12
* 커맨드 prefix로 실행
    * !find
* 바로 직전 명령 재실행
    * !!
* 바로 직전 명령의 마지막 argument
    * !$
        * Unix에서 $는 맨 뒤라는 의미
        * 맨 앞은 ^
        * !는 history
* 직접 명령 편집
    * echo "hello world"
    * ^hello^java : 바로 위 명령의 hello를 java로 변경

## 파일을 다루는 기본 명령

* touch
    * 빈 파일 만들기
    * touch 파일
        * touch file1.txt
        * 절대 경로로 주어지면 권한이 있다면 만들어짐
* 디렉토리 관련 명령
    * mkdir 디렉토리 : make directory의 약어
    * rmdir 디렉토리 : remove directory의 약어
        * 비어있는 디렉토리만 삭제
* cp
    * cp text1.txt text2.txt
    * cp -r mydir1 mydir2
        * 디렉토리 복사
        * 마지막 인자가 디렉토리일 경우 앞에 여러개의 파일을 복사 가능
* mv
    * mv text1.txt text2.txt
    * mv mydir1 mydir2
    * 대상 파일이 이미 존재하는 디렉토리면 에러가 남
* rm
    * rm -f test2.txt
        * 파일을 강제로 지우는 옵션
        * 기본 명령은 rm test2.txt
        * 리눅스에서는 파일을 지우면 복구하지 못함
        * -i : 파일을 삭제할 것인지 물어보는 옵션
    * rm -rf mydir2
        * rmdir로 지워지지 않는 디렉토리도 지울 수 있음
        * -r : recursive
* file
    * 파일의 종류를 판단하는 명령
    * file 파일
        * 실행 가능하다면 excutable이 나옴
        * 뒤에 \*이 달려 있으면 실행 가능하다는 뜻
    * file /bin/gzip
    * file /etc/rpm/macros.jpackage

# 변수

* 사용자 변수
    * 보통 소문자로 명명
    * x=1
    * x="hello world"
        * ' ' 도 가능은 함.
    * x=hello world
        * 오류
* 주의사항
    * = 주위에 공백 없음
        * Bash의 tokenizer가 허술하기 때문에 공백에 주의해야함.
* 값을 꺼내 쓰기
    * echo x : x라는 변수만 출력
        * 결과 x
    * echo $x
        * 변수의 값을 dereferencing. 변수의 값을 출력 함
    * echo ${x}
        * 변수의 값을 dereferencing, 추천하는 방법
    * echo "$x"
        * 작동은 하나, 오동작의 이슈가 있음
* Full quotation
    * single quote as literal
    * x="java"; echo '$x is noun'
        * $x is noun
    * 싱글 quotation 안쪽을 해석하지 않음.
* Partial Quotation
    * double quote as variable substitution
    * x="java"; echo"$x is noun"
    * 더블 quotation 안쪽을 해석함
        * java is noun

## Evaluation

* 명령 실행 결과를 문자열 변수로 대입
    * backquote(\`) 또는 $로 둘러싸기
    * data\_str=\`date +"%Y%m%d"\`
        * 현재는 권장하지 않음
        * date 명령어 : 현재 시간을 확인
            * +"형식"
    * data\_str=$(date +""%Y%m%d")
* 명령 문자열을 실행하기
    * eval 명령문자열
    * cmd="ls -alF"
    * eval $cmd
* Arithmetic
    * a=13
    * b=$((a % 3))
    * i=$((2 \*\* 60))
    * echo $RANDOM
        * 소괄호 두개를 사용하면 bash가 arithmetic으로 인지하고 계산해줌
    * Type
        * read-only
            * declare -r var=1
            * var=2
        * integer
            * declare -i n=3
            * n="hello
        * array, function 등이 있음. 권장하지 않음

# 환경 변수

## 환경(Environment)

* 프로세스를 둘러싼 주변 정보
* env

## exporting

* sub-shell에서 상속받아 사용할 수 있도록 변수를 공개
* bash 상태에서 다시 bash를 하면 sub-shell
* 사용자 변수를 환경 변수로 전환
* export나 declare -x로 지정
* var1=2
* bash
* echo $var1
* exit
* export var1=2
* bash
* echo $var1
* exit

# 주요 환경 변수

* HOME
* PATH
* LANG, LC\_ALL : 어떤 언어를 쓸 것인가
* TERM : 어떤 터미널을 쓸 것 인가
* SHELL : 어떤 SHELL을 쓸 것인가
* HOSTNAME : 호스트 이름
* LOGNAME / USER / USERNAME
* ID / UID
* EDITOR / VISUAL
* PS1 / PS2
* 개발자에게 유용한 환경 변수
    * SHLVL
    * PPID
    * SECONDS : Shell 이 시작한 후 초과된 시간
    * FUNCNAME
    * TMOUT : 입력하지 않고 있을 때 로그아웃되는 시간

# 파일 Permission

* ls -al
    * permission 참조횟수 소유자 그룹
* type
    * 
        * : file
    * d : directory
* owner : 소유자는 어떤 권한이 있는가
    * rwx : 읽기, 쓰기, 실행
* group : 소유자 그룹에 어떤 권한이 있는가
* others : 그 외 다른 사람은 어떤 권한이 있는가
* octal
    * 777 : 모든 권한
    * 755

``` bash
vi test1.sh
    ls -al !$
chmod 0644 !$
ls -al !$
```

* chmod a+x test1.sh
    * a : all의 권한
        * u, g, o : 각각 user, group, other
    * 
        * : 해당 권한을 추가한다
    * x : excute 권한
* umask
    * 파일에 부여되는 permission의 초기값에서 제외할 권한 지정
    * octal 값을 사용함
* 소유자 변경하기
    * chown 소유자아이디 파일
        * change owner
        * super user만 가능함

# 제어문

## Boolean expression

* &&\, \|\|\, \!\, \-a\, \-o
* \(\( 0 && 1 \)\) && echo true \|\| echo false
    * 조건이 참이면 앞의 명령어 실행
    * 조건이 거짓이면 뒤의 명령어 실행
* \(\( 0 \|\| 1 \)\) && echo true \|\| echo false

## Comparison opeator

* -integer
    * -eq -ne -gt -ge -lt -le
* string
    * < <= > >= == = != -z -n
        * -z : zero length
        * -n : null

## File Test

\* -e : exist?
\* -s : size not zero ?
\* -f / -d / -p / -L
\* file, directory, pipe, symlink ?
\* -r / -w / -x / -u / -g / -k
\* permission?(setuid, setgid,, sticky)
\* nt / ot
\* newer than, older than ?

## if

* if [조건]; then
    * 실행문
* fi
    * 대괄호는 항상 띄어써야함

``` bash
x=3
if [ "$x" =eq 3 ]; then
  echo "x is 3"
fi
```

* 주의사항
    * -eq 연산자는 정수 연산자
    * ==, = 연산자는 문자열 연산자
    * 변수가 정의되지 않았거나 공백을 포함할 수 있으면 quotation 필요
        * x="he llo"
        * if [ "$x" == "he llo" ]; then echo $x fi

## while

* while [ 조건 ]; do
    * 실행문
* done

``` bash
i=3
while &#91; "$i" - lt 10 &#93;; do
    echo $;, i=$((i+1));
done
```

* 무한루프
    * while :; do
        * date
        * sleep 5
    * done

## for

* for 변수명 in 리스트; do
    * 실행문
* done
* \* : 현재 디렉토리의 모든 파일과 디렉토리를 넣어줌
* for dir in \*; do
    * &#91; \-d "$dir" &#93; && \(echo "$dir"; cd "$dir"; ls \| wc \-l\)
* done

## switch-case

* case 변수 in
* 케이스1)
    * 실행문;;
* 케이스2)
    * 실행문;;
* \*)
    * 실행문;;
* esac
* 실행문 뒤에 세미콜론(;) 2개
* default는 \*)
* [[ :upper: ]] 같은 방식으로 대문자인지 확인 가능
* break
* continue

# 입출력 redirect

* 프로세스가 생성될 때 open file descriptor 3개가 자동으로 생성됨
* 표준 입력 - 0번
    * 키보드 입력이 프로세스로 들어가는 통로
* 표준 출력 - 1번
    * 프로세스가 출력한 애용이 화면으로 나오는 통로
* 표준 에러 - 2번
    * 프로세스에서 발생한 에러가 화면으로 나오는 통로
* 3, 4, 5, 6번은 파일로 보낼 수 있다
* 0, 1, 2번을 파일로 보내는 것이 입출력 redirect라고 함
    * 0, 1, 2번은 source와 destination이 정해져 있다.
* input redirect
    * sort < in.txt
* output redirect
    * ls /lkjfslfjds > out.txt
        * 명령어의 결과를 화면에 출력하지 않고 가로채서 out.txt로 보냄
        * cat/more/less 등의 명령어로 확인 가능
    * ls /lkjfslfjds > out.txt 2> err.txt
        * 2> : 2번 통로를 err.txt로 보냄
* append
    * ls /lkjfslfjds > allresult.txt 2>&1
    * ls /lkjfslfjds 2\>&1 \| sort

# 필터

* 프로세스의 출력을 다른 프로세스의 입력으로 전달
    * 파이프\(\|\) 기호를 이용
    * ls \| head
    * cat test\.txt \| sort \| uniq \-c \| sort \-n
        * cat test.txt 를 sort로 이동
        * sort 결과를 uniq -c로 이동
            * 동일한 파일이 나오면 중복을 없애고 카운팅
        * uniq -c를 sort -n으로 이동
            * -n은 숫자로 정렬
        * script를 입력하면 shell이 fork를 하여 새로운 shell을 만들고, 만들어진 shell이 명령어로 변한 다음 실행하고 사라짐.
* 특정 단계에서 발생하느 에러도 잡고 싶다면
    * 2>&1 추가

# 파일 다루기

## 파일 내용 보기

* cat test1.txt
* more test1.txt
* grep bash \.bashrc \| less \-eMR
* 파일 앞쪽 일부만 보기
    * head -10 test1.txt
* 파일 뒤쪽 일부만 보기
    * tail -5 test1.txt
    * tail -f /var/log/lastlog
        * 파일의 변동 사항을 계속 보여줌

## 파일에서 문자열 찾기

* 찾기
    * grep 문자열 파일
        * 라인 단위로 찾음
    * grep "export" /etc/profile
    * grep -r "export" /etc
        * recursive하게 디렉토리를 찾으라는 의미
* 잘라내서 쓰기
    * cut -d 구분자 -f 필드번호 파일
        * 한 라인 내에서 잘라냄
    * grep - /etc/passwd \| cut \-d: \-f1\,3\-4\,7

# Alias

## 별명

* alias
* alias grep="egrep"
    * extended grep(egrep)을 grep으로 사용함
* alias diffs="diff -ignore-all-space"
* alias l="ssh "

# 함수

* function과 subroutine을 구분하지 않음
    * function은 return이 있고, subroutine은 없음
    * func1() { echo "hello, $1"; }
    * func1 "world"
    * function func2 { return $(($1 + $2)); }
        * 0\~255까지의 숫자만 return 가능
        * $1\~$9 : n번째 argument
    * func2 3 4
    * echo $?
        * command의 실행 결과는 보는 것
    * command 들을 sub command로 만들기 위해 개발된 것이 함수
* 변수는 기본적으로 전역
* 함수 내부에서만 사용하려면 local로 지정해야함
    * function test1() {
        * local int\_val=3
        * str\_val="value of global variable"
    * }
    * test1
    * echo $int\_val
    * echo $str\_val

# Script file

## shebang

* #!
    * 어떤 인터프리터 프로그램을 사용할 것 인가를 지정
* #!/bin/bash
* #!/usr/bin/env python
    * 권장하는 방식
* #!/bin/awk -f
    * 옵션을 붙여야할 경우, env를 사용할 수 없음

## 파일 작성

* test.sh

``` bash
#!/bin/bash
echo "hello world"
```

* bash test.sh
* chmod a+x test.sh
* ./test.sh
    * 실행을 하면 bash가 먼저 받음
    * 첫 줄에 있는 shebang을 보고 인터프리터에 넘겨줌
    * 받은 인터프리터가 읽어서 실행함
    *

## command-line arguments

* $1, $2, ...
* $#
* exit status
* $?
* function의 매개변수와 리턴값도 동일하게 처리

# Job Control

* Foreground job
    * 기본적으로 프로그램은 foreground에서 실행됨
    * 한 명령의 실행이 끝날 때까지 다음 명령은 기다려야함
* Background job
    * foreground 상태
        * ctrl+z를 하면 suspended로 감
        * bg를 입력하면 background로 들어감
    * &를 붙여서 실행하면 background에서 실행됨
    * 다음 명령을 바로 실행하거나 프롬프트가 뜸

``` bash
sleep 500 &
jobs
fg %1
ctrl-z
bg
wait
```

# 사용자 설정

## Bourne shell

* \~/.profile

## BASH

* 기존의 profile은 etc/.profile에 남아 있음
* login shell
    * .bashrc
    * 로그인 후에 해야할 것들
* non-login shell
    * .bash\_profile
    * 로그인 전에 해야할 것들
* 두 파일을 링크에서 동일하게 하는 것을 추천
* .bashrc을 수정한 후에 source \~/.bashrc를 통해 적용시킴

# 자주 사용하는 명령

## 파일 경로 다루기

* 디렉토리 이름 구하기

``` bash
dirname /usr/local/share/doc/foo.txt
```

* 파일 이름 구하기

``` bash
basename /usr/local/share/doc/foo.txt
```

## 화면 청소하기

``` bash
clear
```

## 실행가능한 프로그램 확인

* which

``` bash
which lsof
```

* PATH 환경 변수에 포함되어야 탐색 가능

## 로케일 관련 명령

* locale

``` bash
locale
locale -a
```

* 다음과 같은 방식으로 원하는 것들만 볼 수 있음

``` bash
locale -a | grep ko
```

* iconv

``` bash
iconv -f CP949 -t UTF-8 완성형파일 > UTF8파일
```

* -c 옵션 필수

``` bash
iconv -l
```

## 정렬과 카운팅

* 정렬
    * -u 옵션은 unique

``` bash
sort 파일
sort -u
```

* 인접한 행의 중복 제거

``` bash
uniq 파일
```

* 행/열/문자 수 세기
    * 각각 라인, 워드, 캐릭터 수 세기

``` bash
wc 파일
wc -l
wc -w
wc -c
```

* 자주 쓰는 조합
    * sort, uniq, sort 정렬을 많이 사용함

``` bash
cut -d: -f 7 /etc/passwd | sort -u | wc -l
```

``` bash
grep -v "^#" /etc/sysctl.conf | cut -d'.' -f1 | sort | uniq -c | sort -n
```

## 파일 탐색

* find
    * or 조건을 걸기 위해 -o를 사용할 수 있음

``` bash
find 디렉토리 목록 -name 이름패턴 -type 파일유형 ...
find /usr/lib64
find /usr/lib64 -name "lib*.a" -ls
find /usr/lib64 -type d -name "py*"
find /usr/lib64 \( -name "python*" -o -name "pgsql*" \) -ls
```

## 입력을 개별 처리하기

* for 반복문은 공백이 포함된 입력을 처리하기 곤란함
* xargs를 이용하여 행 단위로 처리하기
    * %에 wc -l을 처리함

``` bash
xargs 명령
xargs -I % 명령"%"

find /etc/init | xargs wc -l
find /etc/init | xargs -I % wc -l "%"
```

## 다른 사용자로 변경

* su
    * 다른 사용자로 변경하기

``` bash
su user
su -I usersu
```

* sudo

``` bash
rlogin -I usersu 호스트명
sudo apps/httpd/bin/apachectl start
```

## 접속 패스워드 변경하기
* passwd
    * 내 패스워드 변경
* kpasswd
    * kerberos 패스워드 변경

## 시스템 관련 명령

* 시스템 자원 현황 조회
    * top
* 디렉토리의 크기 조회
    * du -s
* 디스크 전체 사용현황 조회
    * df -k

## 네트웍 관련 명령

* ifconfig : 아이피 주소
* ping ip
* nslookup => getent hosts
    * getent hosts 주소

## 메뉴얼 페이지

* man wc
* mac 2 open
* man 3 opendir


## 참고
* NHN Basecamp